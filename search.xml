<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>搭建渗透测试靶场</title>
      <link href="/2024/02/16/%E6%90%AD%E5%BB%BA%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E9%9D%B6%E5%9C%BA/"/>
      <url>/2024/02/16/%E6%90%AD%E5%BB%BA%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E9%9D%B6%E5%9C%BA/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>爬虫入门</title>
      <link href="/2024/02/08/%E7%88%AC%E8%99%AB%E5%85%A5%E9%97%A8/"/>
      <url>/2024/02/08/%E7%88%AC%E8%99%AB%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<p>爬虫顾名思义就是爬取网络上的资源。英文名为spider（蜘蛛）。这个比喻很是形象。我们的信息被大量的存储在互联网上（Html），这就需要我们首先了解一下Html语言。</p><h2>了解Html语言</h2>又一个非常显著的特征是，Html语言多是双节的：例如加粗语法为: <strong></strong> 维基百科上对它的描述为：超文本标记语言（英语：HyperText Markup Language，简称：HTML）是一种用于创建网页的标准标记语言。HTML是一种基础技术，常与CSS、JavaScript一起被众多网站用于设计网页、网页应用程序以及移动应用程序的用户界面[3]。网页浏览器可以读取HTML文件，并将其渲染成可视化网页。HTML描述了一个网站的结构语义随着线索的呈现，使之成为一种标记语言而非编程语言。<p>HTML元素是构建网站的基石。HTML允许嵌入图像与对象，并且可以用于创建交互式表单，它被用来结构化信息——例如标题、段落和列表等等，也可用来在一定程度上描述文档的外观和语义。HTML的语言形式为尖括号包围的HTML元素（如<html>），浏览器使用HTML标签和脚本来诠释网页内容，但不会将它们显示在页面上。</p><p>HTML可以嵌入如JavaScript的脚本语言，它们会影响HTML网页的行为。网页浏览器也可以引用层叠样式表（CSS）来定义文本和其它元素的外观与布局。维护HTML和CSS标准的组织万维网联盟（W3C）鼓励人们使用CSS替代一些用于表现的HTML元素[4]。</p><p>实际上，Html是一种非常好学的语言。</p><h3>了解网站</h3>我们随意打开一个网页，譬如我自己的一个整理网站 <a herf = "shalee.cn">测试网站shalee.cn</a>我们选用主流的Google浏览器演示，打开网站后，我们会看到网站所呈现的内容。<img    src="https://cdn.jsdelivr.net/gh/GttShalee/Blog-pic/Screenshot%202024-02-16%20at%2020.28.44.png">实际上，我们都知道这些内容的本质是一行行代码。浏览器可以将这些代码通过编译器翻译成可视化内容来提供给我们浏览。接着我们右键浏览器的页面，找到<strong>检查（inspect）</strong>选项，点击，将会看到如下界面，这也是我们使用爬虫所必需认识的。<img    src="https://cdn.jsdelivr.net/gh/GttShalee/Blog-pic/Screenshot%202024-02-16%20at%2020.28.59.png">我们会发现右边出现了一堆乱七八糟的代码。不过不用着急，很多东西我们会认识就行， 比一定非得精通。<h3>使用Vs code编写网页</h3>例如下面的代码：<img    src="https://cdn.jsdelivr.net/gh/GttShalee/Blog-pic/Screenshot%202024-02-16%20at%2021.07.33.png">这是我当时整理C语言期末总结时写的关于运算符的内容。学会用vs code编写一些简单的代码是很有必要的。当然如果想要更美观，还需要借助css等其他语言的嵌入。<h2>了解爬虫原理</h2>我们爬虫的主体目标是网页，说白了我们也是需要知道它的ip地址的。然而我们不可能记住这么长的数字；实际上我们上网时输入的网址例如baidu.com实际上是域名对于ip地址的映射，这就像是我们用一个简单的变量来代替一个非常复杂的内容。当然域名也是唯一的哦。原理其实很简单，就是我们选取一个目标网站，通过Python里面的方法库来获取网页的信息，经过整理分析得到我们需要的数据。说白了就是一个数据的获取、处理以及分析过程。<h2>python的使用</h2>python是一门很容易入手的计算机语言，主要原因就是它的实用性以及直观性。首先我们选取网站后，需要先尝试与其连接（本质上就是让python充当浏览器访问其服务器）。基本语法为：<pre>import requestsfrom bs4 import BeautifulSouprespond = requests.get("网站url")</pre><p>其中request以及BeautifulSoup分别是两个库，第一个是获取链接需要的（下文的request就是其中的方法）；另外一个是处理网页内容的。<br>可以百度详细了解内容。那么怎么确认是否访问成功呢？</p><pre>import requestsresponse = requests.get("https://gttshalee.github.io/")if response.ok:    print(response.text)else:    print("失败")</pre><p>我们知道404是网页不存在的代号，其实还有很多不同错误的代号。只要前面不是1开头统统是连接失败。具体原因可以自行了解。</p><p>下面是爬去豆瓣250电影名字的代码块。</p><pre>import requestshead = {    "User-Agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7)     AppleWebKit/537.36 (KHTML, like Gecko)     Chrome/120.0.0.0 Safari/537.36 Edg/120.0.0.0"}from bs4 import BeautifulSoupTitle = requests.get("https://movie.douban.com/top250", headers=head)# 成功读取文件，下面用 Beautifulsoup 来美化# print(title.status_code)soup = BeautifulSoup(Title, "html.parser")all_title = soup.findAll("title")for title in all_title:    print(title.string)</pre><p>实际上，豆瓣官网无法直接通过python获取链接。这时候就需要我们利用一些手段来欺骗网站服务器，让其以为我们是通过浏览器登录的好网民。<br>注意到上述代码中有一个head，这个就是我们伪装的帽子。那么head里面的内容在哪里呢？<br>这时候需要我们打开所要爬去的网页，右键点开检查，在控制台中选择network，点击打开<br>出现如下页面：</p><p>&lt;img<br>    src&#x3D;”<a href="https://cdn.jsdelivr.net/gh/GttShalee/Blog-pic/Screenshot%202024-02-16%20at%2021.34.30.png">https://cdn.jsdelivr.net/gh/GttShalee/Blog-pic/Screenshot%202024-02-16%20at%2021.34.30.png</a>“</p><blockquote></blockquote><p>我们任意选择一条，双击打开在最下面会有User-Agent,复制后面的代码，将其拷贝在请求的开始，这样就相当于用浏览器用户伪装python进行request请求。<br>至此，我们几乎可以获取任何的互联网上的内容，但是获取容易处理难。下一期我将整理一下爬虫的数据处理。<br>记住，爬虫是学习技术，而不是我们充当违反法律的武器。</p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PicGo搭建免费图床</title>
      <link href="/2024/01/29/Picgo%E6%90%AD%E5%BB%BA%E5%85%8D%E8%B4%B9%E5%9B%BE%E5%BA%8A/"/>
      <url>/2024/01/29/Picgo%E6%90%AD%E5%BB%BA%E5%85%8D%E8%B4%B9%E5%9B%BE%E5%BA%8A/</url>
      
        <content type="html"><![CDATA[<p>在搭建个人博客的时候，以后难免会遇到跨平台问题。如果我们仅仅将图片储存在本地磁盘中， 那么编写的代码一定会包含他们的本地地址——然而这却在别的平台上无法识别。<br>而图床的出现，恰恰解决了这一个问题。<br>所谓图床，其实就是啊相当于在互联网上搭建一个服务器用来存储照片，这样的话一个照片对应一个url，就不会收到跨平台的限制。<br><a href = "https://baike.baidu.com/item/%E5%9B%BE%E5%BA%8A/10721348" >图床的具体概念</a></p><div><h2>GitHub操作</h2><h3>1.注册GitHub账号</h3>只需要有一个邮箱即可。需要注意的是，现在的Github似乎锁区了，必须通过一些手段才能正常进去，否则，即使你在命令行中中可以ping到它的站点，但是却依旧无法访问。<a href = "https://github.com/">Github网站</a>注册完成后就开始下一个。<h3>2.创建一个仓库</h3><img src="https://cdn.jsdelivr.net/gh/GttShalee/Blog-pic/Screenshot%202024-01-29%20at%2023.35.40.png">仓库名可以随意，然后其他的都可以默认，点击Create，这样你的仓库就创建好了。<h3>3.获取token</h3>首先打开github首页，点击你的头像（右上角），点击里面的设置选项，在进入的新页面侧边栏最下方有个Developer setting，点击，选择classic（经典模式）就可以，然后一路操作，之后会得到一长串token。这个东西github也会提示你，说务必要保存起来，因为这玩意在你刷新页面后就会被隐藏，例如下图：<img src="https://cdn.jsdelivr.net/gh/GttShalee/Blog-pic/Screenshot%202024-01-29%20at%2023.06.13.png" alt="token获取后无法再次显示"></div><div><h1><strong>到此为止关于GitHub的配置基本上到了尾声，下面接着看第二步 ： PicGo的使用</strong></h1><h2>PicGo操作</h2><h3>1.PicGo下载与安装</h3>Picgo是一个开源的图床创建应用，它的界面友好，支持的图床也多，还可以在本地对图片进行管理，支持拖拽上传，使用很方便。下载链接直接从官网获取：<a href="https://github.com/Molunerfinn/PicGo/releases">Picgo在gihub上的开源包</a>，一共大约80M，即使网速不快也不需要等很长时间。下载完成后打开，在这里我做个补充。我本人使用的是Mac电脑，在我第一次打开时，发现系统提醒我说 app is be damaged……最后是打不开文件。这种情况可以通过在命令控制台中输入：<pre class="prettyprint linenums" >xattr -cr /Applications/AppName. app   </pre>执行这个命令之后就可以正常进入了。<h3>2.PicGo配置</h3>打开软件侧边栏的图床设置，选择GitHub，如下图：<img src="https://cdn.jsdelivr.net/gh/GttShalee/Blog-pic/Screenshot%202024-01-29%20at%2023.27.59.png" alt="示例">点击编辑按钮，图床配置名可以随意设置（例如blog-pic），仓库名查询当时GitHub建立时设置的名字，分支默认main（之前是master），然后将保存好的token复制粘贴过去，这样就算完成了基本设置。<h2>开始使用</h2>现在就可以正常的使用PicGo啦！只需要打开软件，将你想要上传的图片拖到其中，就可以实现。上传后，点击相册，可以查看复制图片的url。</div>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo博客搭建 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Shalee</title>
      <link href="/2024/01/28/Shalee/"/>
      <url>/2024/01/28/Shalee/</url>
      
        <content type="html"><![CDATA[<p>很难实现对自己的客观评价。</p>]]></content>
      
      
      <categories>
          
          <category> shalee </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 关于我自己 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
